name: MERN CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # -------------------
  # 1. Server (Node.js/Express) Tests
  # -------------------
  server-test:
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: Run server linting
        working-directory: ./server
        run: npm run lint

      - name: Run server tests
        working-directory: ./server
        run: npm test
        env:
          NODE_ENV: test
          MONGO_URI: mongodb://localhost:27017/issue_tracker_test

      - name: Run server tests with coverage
        working-directory: ./server
        run: npm run test:coverage
        env:
          NODE_ENV: test
          MONGO_URI: mongodb://localhost:27017/issue_tracker_test

  # -------------------
  # 2. Client (React) Tests
  # -------------------
  client-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: Run client linting
        working-directory: ./client
        run: npm run lint

      - name: Run client tests
        working-directory: ./client
        run: npm test

      - name: Run client tests with coverage
        working-directory: ./client
        run: npm run test:coverage

      - name: Build client for production
        working-directory: ./client
        run: npm run build

      - name: Upload client build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: client-build
          path: client/dist/

  # -------------------
  # 3. Integration Tests (Optional)
  # -------------------
  integration-test:
    runs-on: ubuntu-latest
    needs: [server-test, client-test]
    services:
      mongo:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: Build client
        working-directory: ./client
        run: npm run build

      - name: Start server in background
        working-directory: ./server
        run: |
          npm start &
          sleep 5
        env:
          NODE_ENV: test
          MONGO_URI: mongodb://localhost:27017/issue_tracker_test
          PORT: 3001

      - name: Test server health
        run: |
          curl -f http://localhost:3001/health || exit 1

  # -------------------
  # 4. Docker Compose Validation
  # -------------------
  docker-compose-test:
    runs-on: ubuntu-latest
    needs: [server-test, client-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: docker compose version

      - name: Build with Docker Compose
        run: docker compose build

      - name: Test Docker Compose startup
        run: |
          docker compose up -d
          sleep 30
          docker compose ps
          
      - name: Test application health
        run: |
          # Test if server is responding
          curl -f http://localhost:3001/health || echo "Server health check failed"
          # Test if client is accessible
          curl -f http://localhost:3000 || echo "Client health check failed"

      - name: Show Docker logs on failure
        if: failure()
        run: |
          echo "=== Server Logs ==="
          docker compose logs server
          echo "=== Client Logs ==="
          docker compose logs client
          echo "=== MongoDB Logs ==="
          docker compose logs mongo

      - name: Cleanup Docker Compose
        if: always()
        run: docker compose down -v

  # -------------------
  # 5. Security and Quality Checks
  # -------------------
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Audit server dependencies
        working-directory: ./server
        run: npm audit --audit-level=high

      - name: Audit client dependencies
        working-directory: ./client
        run: npm audit --audit-level=high

  # -------------------
  # 6. Code Quality Report
  # -------------------
  code-quality:
    runs-on: ubuntu-latest
    needs: [server-test, client-test]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: Generate server coverage report
        working-directory: ./server
        run: npm run test:coverage

      - name: Generate client coverage report
        working-directory: ./client
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            server/coverage/
            client/coverage/

  # -------------------
  # 7. Deployment (only on main branch)
  # -------------------
  deploy:
    runs-on: ubuntu-latest
    needs: [server-test, client-test, docker-compose-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download client build artifacts
        uses: actions/download-artifact@v4
        with:
          name: client-build
          path: client/dist/

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
          # For example: deploy to Heroku, AWS, etc.
          echo "Deployment completed successfully!"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi